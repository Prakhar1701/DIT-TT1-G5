1. Write a program to calculate the sum of following series where n is input by user.

e.g 1 + 1/2 + 1/3 + 1/4 + 1/5 +…………1/n



2. Find out Prime Number

3.  Reverse a Number

4. Find out LCM and GCD of a Number



5. Implement a program to find out whether a number is divisible by the sum of its digits.

Display appropriate messages.

e.g 2250 - Yes

e.g 123 - NO





6. Implement a program to find out whether a number is a seed of another number.

A number X is said to be a seed of number Y if multiplying X by its every digit equates to Y.

E.g.: 123 is a seed of 738 as 123*1*2*3 = 738



e.g 123, 738 - Yes

e.g 45,1000 - No



7. Java has 8 primitive data types; char, boolean, byte, short, int, long, float, and double. For this exercise, we'll work with the primitives used to hold integer values (byte, short, int, and long):

A byte is an 8-bit signed integer.
A short is a 16-bit signed integer.
An int is a 32-bit signed integer.
A long is a 64-bit signed integer.
Given an input integer, you must determine which primitive data types are capable of properly storing that input.



Input Format

The first line contains an integer, , denoting the number of test cases.
Each test case, , is comprised of a single line with an integer, , which can be arbitrarily large or small.

Output Format

For each input variable  and appropriate primitive , you must determine if the given primitives are capable of storing it. If yes, then print:

n can be fitted in:

* dataType

If there is more than one appropriate data type, print each one on its own line and order them by size (i.e.: ).

If the number cannot be stored in one of the four aforementioned primitives, print the line:

n can't be fitted anywhere.





Sample Input

5

-150

150000

1500000000

213333333333333333333333333333333333

-100000000000000

Sample Output

-150 can be fitted in:

* short

* int

* long

150000 can be fitted in:

* int

* long

1500000000 can be fitted in:

* int

* long

213333333333333333333333333333333333 can't be fitted anywhere.

-100000000000000 can be fitted in:

* long